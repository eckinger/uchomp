import { pool } from "../db/db";

// code generator
function generateCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// Insert or update a code for an email
export async function sendCode(
  email: string
): Promise<{ success: boolean; code: string; error?: string }> {
  const code = generateCode();

  try {
    // TODO: Turn this into a stored procedure
    // First check if email exists in user table, if not create it
    const result = await pool.query(`SELECT user_exists($1) as exists`, [
      email,
    ]);
    const exists = result.rows[0]?.exists;

    console.log("exists: " + exists);
    if (!exists) {
      // Create user entry first (ID will be auto-generated by PostgreSQL)
      await pool.query('INSERT INTO "user" (email) VALUES ($1)', [email]);
    }

    // Now insert or update the code
    await pool.query(
      `INSERT INTO code (email, key, created_at) VALUES ($1, $2, NOW())
       ON CONFLICT (email) DO UPDATE SET key = $2, created_at = NOW()`,
      [email, code]
    );
    console.log(`Generated code for ${email}: ${code}`);
    return { success: true, code };
  } catch (err) {
    console.error("Error inserting code:", err);
    return {
      success: false,
      code: "",
      error: `Database error: ${(err as Error).message}`,
    };
  }
}

// Verifies a user's email and code, deletes the code after use
export async function verify(
  email: string,
  code: string
): Promise<{ success: boolean; error?: string }> {
  try {
    // Check if code exists and is valid
    const codeResult = await pool.query(
      `SELECT key, created_at FROM code WHERE email = $1`,
      [email]
    );

    if (codeResult.rows.length === 0) {
      return { success: false, error: "Code not found." };
    }

    if (codeResult.rows[0].key !== code) {
      return { success: false, error: "Invalid code." };
    }

    // Check if code is expired (more than 10 minutes old)
    const createdAt = new Date(codeResult.rows[0].created_at);
    const now = new Date();
    const diffMinutes = (now.getTime() - createdAt.getTime()) / (1000 * 60);

    if (diffMinutes > 10) {
      return { success: false, error: "Code has expired." };
    }

    // User should already exist since we create it in send_code
    // But let's make sure by doing a check
    const userCheck = await pool.query(
      'SELECT id FROM "user" WHERE email = $1',
      [email]
    );

    if (userCheck.rows.length === 0) {
      // For robustness, create user if it doesn't exist somehow
      await pool.query('INSERT INTO "user" (email) VALUES ($1)', [email]);
    }

    // Delete code after verification
    await pool.query(`DELETE FROM code WHERE email = $1`, [email]);

    return { success: true };
  } catch (err) {
    console.error("Error during verification:", err);
    return { success: false, error: (err as Error).message };
  }
}

// Adds or updates the name and phone for a user identified by email
export async function get_name_and_cell(
  email: string,
  name: string,
  cell: string
): Promise<{ success: boolean; error?: string }> {
  try {
    // Validate phone number format (simple validation)
    if (!/^\d{3}-\d{3}-\d{4}$/.test(cell)) {
      throw new Error("Invalid phone number format. Use XXX-XXX-XXXX format.");
    }

    // Check if user exists
    const userCheck = await pool.query(
      'SELECT id FROM "user" WHERE email = $1',
      [email]
    );

    if (userCheck.rows.length === 0) {
      throw new Error("User not found.");
    }

    // Update user information
    const result = await pool.query(
      `UPDATE "user" SET name = $2, cell = $3 WHERE email = $1 RETURNING id`,
      [email, name, cell]
    );

    if (result.rows.length === 0) {
      return { success: false, error: "Failed to update user information." };
    }

    return { success: true };
  } catch (err) {
    console.error("Error updating name and cell:", err);
    if ((err as Error).message.includes("User not found")) {
      throw new Error("User not found.");
    } else if ((err as Error).message.includes("Invalid phone")) {
      throw new Error("Invalid phone number format.");
    }
    return { success: false, error: (err as Error).message };
  }
}

// Optional helper function to save user (not required by tests but might be useful)
export async function save_user(
  name: string,
  cell: string,
  email: string
): Promise<{ success: boolean; error?: string }> {
  try {
    if (!/^\d{3}-\d{3}-\d{4}$/.test(cell)) {
      throw new Error("Invalid phone number format. Use XXX-XXX-XXXX format.");
    }

    await pool.query(
      `INSERT INTO "user" (name, cell, email) VALUES ($1, $2, $3)
       ON CONFLICT (email) DO UPDATE SET name = $1, cell = $2`,
      [name, cell, email]
    );
    return { success: true };
  } catch (err) {
    console.error("Error saving user:", err);
    return { success: false, error: (err as Error).message };
  }
}
